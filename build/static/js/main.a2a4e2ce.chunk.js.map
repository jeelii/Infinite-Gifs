{"version":3,"sources":["Components/utilities/getParam.js","Components/SearchForm.js","Components/Gif.js","Components/NoGifs.js","Components/GifList.js","Components/App.js","index.js"],"names":["parameterName","url","URLSearchParams","get","SearchForm","props","useState","searchText","setSearchText","className","onSubmit","e","preventDefault","onSearch","currentTarget","reset","htmlFor","type","onChange","target","value","name","placeholder","id","Gif","src","alt","NoGifs","GifList","gifs","results","data","length","map","gif","images","fixed_height","key","App","history","useHistory","location","useLocation","setData","getParam","search","query","setQuery","isLoading","setIsLoading","useEffect","axios","then","response","catch","error","console","log","finally","locationParam","newPath","push","ReactDOM","render","document","getElementById"],"mappings":"2PAAe,WAACA,EAAeC,GAE7B,OADkB,IAAIC,gBAAgBD,GACrBE,IAAIH,ICwBRI,MAxBf,SAAoBC,GAClB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACE,0BAAMC,UAAU,cAAcC,SAPX,SAACC,GACpBA,EAAEC,iBACFP,EAAMQ,SAASN,GACfI,EAAEG,cAAcC,UAKd,2BAAON,UAAU,YAAYO,QAAQ,UAArC,UACA,2BAAOC,KAAK,SACVC,SAZiB,SAACP,GAAD,OAAOH,EAAcG,EAAEQ,OAAOC,QAa/CC,KAAK,SACLC,YAAY,cAEd,4BAAQL,KAAK,SAASM,GAAG,SAASd,UAAU,iBAAgB,uBAAGA,UAAU,6BAAb,aCbnDe,EANH,SAAAnB,GAAK,OACf,wBAAII,UAAU,YACZ,yBAAKgB,IAAKpB,EAAMJ,IAAKyB,IAAI,OCKdC,EAPA,SAAAtB,GAAK,OAClB,wBAAII,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,mECgBWmB,EAjBC,SAAAvB,GAEd,IACIwB,EADEC,EAAUzB,EAAM0B,KAQtB,OALEF,EADEC,EAAQE,OACHF,EAAQG,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAKjC,IAAKiC,EAAIC,OAAOC,aAAanC,IAAKoC,IAAKH,EAAIX,QAEnE,kBAAC,EAAD,MAIP,wBAAId,UAAU,YACXoB,ICuCQS,EA9CH,WACV,IAAMC,EAAUC,cACVC,EAAWC,cACjB,EAAwBpC,mBAAS,IAAjC,mBAAOyB,EAAP,KAAaY,EAAb,KACA,EAA0BrC,mBAASsC,EAAS,SAAUH,EAASI,SAAW,OAA1E,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCzC,oBAAS,GAA3C,mBAAO0C,EAAP,KAAkBC,EAAlB,KAsBA,OAdAC,qBAAU,WACRC,IAAM,yCAAD,OAA0CL,EAA1C,oCACFM,MAAK,SAAAC,GAAQ,OAAIV,EAAQU,EAAStB,KAAKA,SACvCuB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,kCAAmCF,MAC9DG,SAAQ,kBAAMT,GAAa,QAC7B,CAACH,IAEJI,qBAAU,WACR,IAAMS,EAAgBf,EAAS,SAAUH,EAASI,QAC9Cc,IAAkBb,GACpBC,EAASY,KAEV,CAAClB,EAAUK,IAGZ,oCACE,yBAAKrC,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,iBAA0CqC,GAC1C,kBAAC,EAAD,CAAYjC,SAzBE,SAACO,GACrB2B,EAAS3B,GACT,IAAMwC,EAAO,kBAAcxC,GAC3B,OAAOmB,EAAQsB,KAAKD,QAyBlB,yBAAKnD,UAAU,gBAEXuC,EACI,yCACA,kBAAC,EAAD,CAASjB,KAAMA,O,QC1C7B+B,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a2a4e2ce.chunk.js","sourcesContent":["export default (parameterName, url) => {\n  const urlParams = new URLSearchParams(url);\n  return urlParams.get(parameterName);\n};","import React, { useState } from 'react';\n\nfunction SearchForm(props) {\n  const [searchText, setSearchText] = useState('');\n\n  const onSearchChange = (e) => setSearchText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.onSearch(searchText);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className=\"search-form\" onSubmit={handleSubmit}>\n      <label className=\"is-hidden\" htmlFor=\"search\">Search</label>\n      <input type=\"search\"\n        onChange={onSearchChange}\n        name=\"search\"\n        placeholder=\"Search...\"\n      />\n      <button type=\"submit\" id=\"submit\" className=\"search-button\"><i className=\"material-icons icn-search\">search</i></button>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React from 'react';\n\nconst Gif = props => (\n  <li className=\"gif-wrap\">\n    <img src={props.url} alt=\"\"/>\n  </li>\n);\n\nexport default Gif;","import React from 'react';\n\nconst NoGifs = props => (\n  <li className='no-gifs'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no GIFs match your search.</h3>\n  </li>\n);\n\nexport default NoGifs;","import React from 'react';\nimport Gif from './Gif';\nimport NoGifs from './NoGifs';\n\nconst GifList = props => { \n  \n  const results = props.data;\n  let gifs;\n  if (results.length) {\n    gifs = results.map(gif => <Gif url={gif.images.fixed_height.url} key={gif.id} />);    \n  } else {\n    gifs = <NoGifs />\n  }\n\n  return(\n    <ul className=\"gif-list\">\n      {gifs}\n    </ul> \n  );\n}\n\nexport default GifList;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport '../App.css';\nimport axios from 'axios';\nimport getParam from './utilities/getParam';\n\nimport SearchForm from './SearchForm';\nimport GifList from './GifList';\n\nconst App = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState(getParam('search', location.search) || 'dog');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const performSearch = (value) => {\n    setQuery(value);\n    const newPath = `?search=${value}`;\n    return history.push(newPath);\n  };\n\n  useEffect(() => {\n    axios(`http://api.giphy.com/v1/gifs/search?q=${query}&limit=24&api_key=dc6zaTOxFJmzC`)\n      .then(response => setData(response.data.data))\n      .catch(error => console.log('Error fetching and parsing data', error))\n      .finally(() => setIsLoading(false));\n  }, [query]);\n\n  useEffect(() => {\n    const locationParam = getParam('search', location.search);\n    if (locationParam !== query) {\n      setQuery(locationParam);\n    }\n  }, [location, query]);\n\n  return (\n    <>\n      <div className=\"main-header\">\n        <div className=\"inner\">\n          <h1 className=\"main-title\">GifSearch for {query}</h1>\n          <SearchForm onSearch={performSearch} />\n        </div>\n      </div>\n      <div className=\"main-content\">\n        {\n          isLoading\n            ? <p>Loading...</p>\n            : <GifList data={data} />\n        }\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}